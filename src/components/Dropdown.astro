---
export interface Option {
    id: number;
    type: string;
}

export interface Props {
    options: Option[];
    placeholder?: string;
    customClass?: string;
    liClass?: string;
    id?: string;
}

const {
    options,
    placeholder = "Select an option",
    customClass = "",
    liClass = "",
    id = `dropdown-${Math.random().toString(36).substring(2, 9)}`, // Generate unique ID if not provided
} = Astro.props;
---

<div class={`custom-dropdown ${customClass}`} id={id}>
    <div class={`selected-option ${liClass}`}>{placeholder}</div>
    <ul class="dropdown-options hidden">
        {options.map((opt) => <li data-id={opt.id}>{opt.type}</li>)}
    </ul>
</div>

<script define:vars={{ id }}>
    const dropdown = document.getElementById(id);
    const selectedOption = dropdown?.querySelector(".selected-option");
    const dropdownOptions = dropdown?.querySelector(".dropdown-options");
    const options = dropdown?.querySelectorAll(".dropdown-options li");

    if (dropdown && selectedOption && dropdownOptions && options) {
        selectedOption.addEventListener("click", (e) => {
            e.stopPropagation();
            dropdownOptions.classList.toggle("hidden");
        });

        options.forEach((option) => {
            option.addEventListener("click", () => {
                selectedOption.textContent = option.textContent || "";
                dropdownOptions.classList.add("hidden");

                dropdown.dispatchEvent(
                    new CustomEvent("dropdownChange", {
                        bubbles: true,
                        detail: {
                            id: option.getAttribute("data-id"),
                            desc: option.textContent,
                        },
                    }),
                );
            });
        });
    }

    document.addEventListener("click", (e) => {
        const target = e.target;
        if (dropdown && !dropdown.contains(target)) {
            dropdownOptions.classList.add("hidden");
        }
    });
</script>
